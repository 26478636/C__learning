// 线程启动，结束，创建线程的多种方法，join，detach


// 1. 线程运行的开始与结束
// 执行起来的可执行程序，称为进程，进程启动，主线程启动
// 主线程从main()函数开始，return 0结束。主线程结束，该进程也就结束了。如果子线程未结束，但是主线程结束了，子线程被强制终止
// 我们自己创建的子线程，也需要从一个函数开始

// 1.1 thread 标准库的类

// 1.2 join() 阻塞主线程，让主线程等待子线程执行完毕，然后子线程与主线程汇合
// 一个书写良好的程序，应该是主线程等待子线程，子线程执行完毕，主线程再退出

// 1.3 detach() 主线程与子线程不再汇合了，主线程在执行自己的，子线程执行自己的

// 1.4 joinable() 判断是否能够成功使用join()或detach() 返回值true/false
// 注 一旦调用join()，就不可以再调用detach();反之，同理


// 其他创建线程的手法
// 2.1 把类对象设为可调用对象
// 调用detach()，一旦主程序结束，class对象还存在么。答案，不存在
// 那么子线程，怎么实现呢
// 实际上，class类对象，被复制到子线程中去了(拷贝构造)，所以即使class对象被销毁了，复制的class对象仍然存在
// 注 要是class对象里没有引用，指针，那么(detach)不会产生问题
