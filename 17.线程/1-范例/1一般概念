// 并发 进程 线程

// 1.1_并发
// (独立的)两个或多个任务同时进行。

// 单核cpu(中央处理器)，某一时刻只能执行一个任务，由操作系统调度，每秒钟进行多次的所谓"任务切换"，
// 这种切换(上下文切换)是要有时间开销的，这种不是真正意义上的并发。

// 多核cpu，能够实现真正的并行执行多个任务。

// 使用并发的原因：主要就是同时干多个事，提高性能。

// 1.2_可执行程序
// 磁盘上的文件，window下，扩展名.exe;linux下，x后缀有执行权限。

// 1.3_进程
// 可执行程序运行起来了，就叫创建一个进程。

// 1.4_线程
// (执行起来的可执行程序，叫做进程)，每个进程都有一个主线程，主线程只有一个且唯一。
// 线程是用来执行代码的，可以理解为一条代码的执行通路。
// 多线程(并发)，除了主线程之外，可以自己写代码创建其他线程，线程不是越多越好，上下文切换需要有时间开销。



// 实现并发的手段，a)多个进程实现并发，b)同一个进程，创建多个线程，实现并发。

// 2.1_多进程并发
// 本课程不是以多进程并发为主的，略。

// 2.2_多线程并发
// 同一个进程，创建多个线程，实现多线程并发。
// 在同一个进程里，所有线程共享地址空间。全局变量，指针，引用可以在线程之间传递。
// 局限性，共享内存，带来的数据一致性问题。